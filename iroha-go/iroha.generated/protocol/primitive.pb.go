//*
// Copyright Soramitsu Co., Ltd. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

//*
// Messages related to primitive types, used in Commands and Queries
//
// Contains RolePermission, GrantablePermission, Signature, and Peer.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: primitive.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Represents any possible value for permission field,
// then the account is capable of performing such action.
//
// Command and Query related permissions are included in the role,
// which an Account can have.
//
// Grantable permission is set as a relation between two accounts:
// Account A is granting Permission to Account B,
// so that Account B can perform actions over Account A.
type RolePermission int32

const (
	// Command Permissions
	RolePermission_can_append_role               RolePermission = 0
	RolePermission_can_create_role               RolePermission = 1
	RolePermission_can_detach_role               RolePermission = 2
	RolePermission_can_add_asset_qty             RolePermission = 3
	RolePermission_can_subtract_asset_qty        RolePermission = 4
	RolePermission_can_add_peer                  RolePermission = 5
	RolePermission_can_remove_peer               RolePermission = 46
	RolePermission_can_add_signatory             RolePermission = 6
	RolePermission_can_remove_signatory          RolePermission = 7
	RolePermission_can_set_quorum                RolePermission = 8
	RolePermission_can_create_account            RolePermission = 9
	RolePermission_can_set_detail                RolePermission = 10
	RolePermission_can_create_asset              RolePermission = 11
	RolePermission_can_transfer                  RolePermission = 12
	RolePermission_can_receive                   RolePermission = 13
	RolePermission_can_create_domain             RolePermission = 14
	RolePermission_can_add_domain_asset_qty      RolePermission = 43
	RolePermission_can_subtract_domain_asset_qty RolePermission = 44
	RolePermission_can_call_engine               RolePermission = 48
	// Query permissions
	RolePermission_can_read_assets                RolePermission = 15
	RolePermission_can_get_roles                  RolePermission = 16
	RolePermission_can_get_my_account             RolePermission = 17
	RolePermission_can_get_all_accounts           RolePermission = 18
	RolePermission_can_get_domain_accounts        RolePermission = 19
	RolePermission_can_get_my_signatories         RolePermission = 20
	RolePermission_can_get_all_signatories        RolePermission = 21
	RolePermission_can_get_domain_signatories     RolePermission = 22
	RolePermission_can_get_my_acc_ast             RolePermission = 23
	RolePermission_can_get_all_acc_ast            RolePermission = 24
	RolePermission_can_get_domain_acc_ast         RolePermission = 25
	RolePermission_can_get_my_acc_detail          RolePermission = 26
	RolePermission_can_get_all_acc_detail         RolePermission = 27
	RolePermission_can_get_domain_acc_detail      RolePermission = 28
	RolePermission_can_get_my_acc_txs             RolePermission = 29
	RolePermission_can_get_all_acc_txs            RolePermission = 30
	RolePermission_can_get_domain_acc_txs         RolePermission = 31
	RolePermission_can_get_my_acc_ast_txs         RolePermission = 32
	RolePermission_can_get_all_acc_ast_txs        RolePermission = 33
	RolePermission_can_get_domain_acc_ast_txs     RolePermission = 34
	RolePermission_can_get_my_txs                 RolePermission = 35
	RolePermission_can_get_all_txs                RolePermission = 36
	RolePermission_can_get_blocks                 RolePermission = 42
	RolePermission_can_get_peers                  RolePermission = 45
	RolePermission_can_get_my_engine_receipts     RolePermission = 50
	RolePermission_can_get_domain_engine_receipts RolePermission = 51
	RolePermission_can_get_all_engine_receipts    RolePermission = 52
	// Grant permissions
	RolePermission_can_grant_can_set_my_quorum            RolePermission = 37
	RolePermission_can_grant_can_add_my_signatory         RolePermission = 38
	RolePermission_can_grant_can_remove_my_signatory      RolePermission = 39
	RolePermission_can_grant_can_transfer_my_assets       RolePermission = 40
	RolePermission_can_grant_can_set_my_account_detail    RolePermission = 41
	RolePermission_can_grant_can_call_engine_on_my_behalf RolePermission = 49
	// Root Permission
	RolePermission_root RolePermission = 47
)

// Enum value maps for RolePermission.
var (
	RolePermission_name = map[int32]string{
		0:  "can_append_role",
		1:  "can_create_role",
		2:  "can_detach_role",
		3:  "can_add_asset_qty",
		4:  "can_subtract_asset_qty",
		5:  "can_add_peer",
		46: "can_remove_peer",
		6:  "can_add_signatory",
		7:  "can_remove_signatory",
		8:  "can_set_quorum",
		9:  "can_create_account",
		10: "can_set_detail",
		11: "can_create_asset",
		12: "can_transfer",
		13: "can_receive",
		14: "can_create_domain",
		43: "can_add_domain_asset_qty",
		44: "can_subtract_domain_asset_qty",
		48: "can_call_engine",
		15: "can_read_assets",
		16: "can_get_roles",
		17: "can_get_my_account",
		18: "can_get_all_accounts",
		19: "can_get_domain_accounts",
		20: "can_get_my_signatories",
		21: "can_get_all_signatories",
		22: "can_get_domain_signatories",
		23: "can_get_my_acc_ast",
		24: "can_get_all_acc_ast",
		25: "can_get_domain_acc_ast",
		26: "can_get_my_acc_detail",
		27: "can_get_all_acc_detail",
		28: "can_get_domain_acc_detail",
		29: "can_get_my_acc_txs",
		30: "can_get_all_acc_txs",
		31: "can_get_domain_acc_txs",
		32: "can_get_my_acc_ast_txs",
		33: "can_get_all_acc_ast_txs",
		34: "can_get_domain_acc_ast_txs",
		35: "can_get_my_txs",
		36: "can_get_all_txs",
		42: "can_get_blocks",
		45: "can_get_peers",
		50: "can_get_my_engine_receipts",
		51: "can_get_domain_engine_receipts",
		52: "can_get_all_engine_receipts",
		37: "can_grant_can_set_my_quorum",
		38: "can_grant_can_add_my_signatory",
		39: "can_grant_can_remove_my_signatory",
		40: "can_grant_can_transfer_my_assets",
		41: "can_grant_can_set_my_account_detail",
		49: "can_grant_can_call_engine_on_my_behalf",
		47: "root",
	}
	RolePermission_value = map[string]int32{
		"can_append_role":                        0,
		"can_create_role":                        1,
		"can_detach_role":                        2,
		"can_add_asset_qty":                      3,
		"can_subtract_asset_qty":                 4,
		"can_add_peer":                           5,
		"can_remove_peer":                        46,
		"can_add_signatory":                      6,
		"can_remove_signatory":                   7,
		"can_set_quorum":                         8,
		"can_create_account":                     9,
		"can_set_detail":                         10,
		"can_create_asset":                       11,
		"can_transfer":                           12,
		"can_receive":                            13,
		"can_create_domain":                      14,
		"can_add_domain_asset_qty":               43,
		"can_subtract_domain_asset_qty":          44,
		"can_call_engine":                        48,
		"can_read_assets":                        15,
		"can_get_roles":                          16,
		"can_get_my_account":                     17,
		"can_get_all_accounts":                   18,
		"can_get_domain_accounts":                19,
		"can_get_my_signatories":                 20,
		"can_get_all_signatories":                21,
		"can_get_domain_signatories":             22,
		"can_get_my_acc_ast":                     23,
		"can_get_all_acc_ast":                    24,
		"can_get_domain_acc_ast":                 25,
		"can_get_my_acc_detail":                  26,
		"can_get_all_acc_detail":                 27,
		"can_get_domain_acc_detail":              28,
		"can_get_my_acc_txs":                     29,
		"can_get_all_acc_txs":                    30,
		"can_get_domain_acc_txs":                 31,
		"can_get_my_acc_ast_txs":                 32,
		"can_get_all_acc_ast_txs":                33,
		"can_get_domain_acc_ast_txs":             34,
		"can_get_my_txs":                         35,
		"can_get_all_txs":                        36,
		"can_get_blocks":                         42,
		"can_get_peers":                          45,
		"can_get_my_engine_receipts":             50,
		"can_get_domain_engine_receipts":         51,
		"can_get_all_engine_receipts":            52,
		"can_grant_can_set_my_quorum":            37,
		"can_grant_can_add_my_signatory":         38,
		"can_grant_can_remove_my_signatory":      39,
		"can_grant_can_transfer_my_assets":       40,
		"can_grant_can_set_my_account_detail":    41,
		"can_grant_can_call_engine_on_my_behalf": 49,
		"root":                                   47,
	}
)

func (x RolePermission) Enum() *RolePermission {
	p := new(RolePermission)
	*p = x
	return p
}

func (x RolePermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RolePermission) Descriptor() protoreflect.EnumDescriptor {
	return file_primitive_proto_enumTypes[0].Descriptor()
}

func (RolePermission) Type() protoreflect.EnumType {
	return &file_primitive_proto_enumTypes[0]
}

func (x RolePermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RolePermission.Descriptor instead.
func (RolePermission) EnumDescriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{0}
}

type GrantablePermission int32

const (
	GrantablePermission_can_add_my_signatory         GrantablePermission = 0
	GrantablePermission_can_remove_my_signatory      GrantablePermission = 1
	GrantablePermission_can_set_my_quorum            GrantablePermission = 2
	GrantablePermission_can_set_my_account_detail    GrantablePermission = 3
	GrantablePermission_can_transfer_my_assets       GrantablePermission = 4 // not implemented now
	GrantablePermission_can_call_engine_on_my_behalf GrantablePermission = 5
)

// Enum value maps for GrantablePermission.
var (
	GrantablePermission_name = map[int32]string{
		0: "can_add_my_signatory",
		1: "can_remove_my_signatory",
		2: "can_set_my_quorum",
		3: "can_set_my_account_detail",
		4: "can_transfer_my_assets",
		5: "can_call_engine_on_my_behalf",
	}
	GrantablePermission_value = map[string]int32{
		"can_add_my_signatory":         0,
		"can_remove_my_signatory":      1,
		"can_set_my_quorum":            2,
		"can_set_my_account_detail":    3,
		"can_transfer_my_assets":       4,
		"can_call_engine_on_my_behalf": 5,
	}
)

func (x GrantablePermission) Enum() *GrantablePermission {
	p := new(GrantablePermission)
	*p = x
	return p
}

func (x GrantablePermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantablePermission) Descriptor() protoreflect.EnumDescriptor {
	return file_primitive_proto_enumTypes[1].Descriptor()
}

func (GrantablePermission) Type() protoreflect.EnumType {
	return &file_primitive_proto_enumTypes[1]
}

func (x GrantablePermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantablePermission.Descriptor instead.
func (GrantablePermission) EnumDescriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{1}
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_primitive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_primitive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{0}
}

func (x *Signature) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Signature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PeerKey string `protobuf:"bytes,2,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"` // hex string
	// Types that are assignable to Certificate:
	//	*Peer_TlsCertificate
	Certificate isPeer_Certificate `protobuf_oneof:"certificate"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_primitive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_primitive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{1}
}

func (x *Peer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Peer) GetPeerKey() string {
	if x != nil {
		return x.PeerKey
	}
	return ""
}

func (m *Peer) GetCertificate() isPeer_Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (x *Peer) GetTlsCertificate() string {
	if x, ok := x.GetCertificate().(*Peer_TlsCertificate); ok {
		return x.TlsCertificate
	}
	return ""
}

type isPeer_Certificate interface {
	isPeer_Certificate()
}

type Peer_TlsCertificate struct {
	TlsCertificate string `protobuf:"bytes,3,opt,name=tls_certificate,json=tlsCertificate,proto3,oneof"` // pem-encoded string
}

func (*Peer_TlsCertificate) isPeer_Certificate() {}

type AccountDetailRecordId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Writer string `protobuf:"bytes,1,opt,name=writer,proto3" json:"writer,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AccountDetailRecordId) Reset() {
	*x = AccountDetailRecordId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_primitive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDetailRecordId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDetailRecordId) ProtoMessage() {}

func (x *AccountDetailRecordId) ProtoReflect() protoreflect.Message {
	mi := &file_primitive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDetailRecordId.ProtoReflect.Descriptor instead.
func (*AccountDetailRecordId) Descriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{2}
}

func (x *AccountDetailRecordId) GetWriter() string {
	if x != nil {
		return x.Writer
	}
	return ""
}

func (x *AccountDetailRecordId) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type EngineLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // hex string
	Data    string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`       // hex string
	Topics  []string `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`   // hex string
}

func (x *EngineLog) Reset() {
	*x = EngineLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_primitive_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineLog) ProtoMessage() {}

func (x *EngineLog) ProtoReflect() protoreflect.Message {
	mi := &file_primitive_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineLog.ProtoReflect.Descriptor instead.
func (*EngineLog) Descriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{3}
}

func (x *EngineLog) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EngineLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EngineLog) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CallResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callee     string `protobuf:"bytes,1,opt,name=callee,proto3" json:"callee,omitempty"`
	ResultData string `protobuf:"bytes,2,opt,name=result_data,json=resultData,proto3" json:"result_data,omitempty"`
}

func (x *CallResult) Reset() {
	*x = CallResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_primitive_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResult) ProtoMessage() {}

func (x *CallResult) ProtoReflect() protoreflect.Message {
	mi := &file_primitive_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResult.ProtoReflect.Descriptor instead.
func (*CallResult) Descriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{4}
}

func (x *CallResult) GetCallee() string {
	if x != nil {
		return x.Callee
	}
	return ""
}

func (x *CallResult) GetResultData() string {
	if x != nil {
		return x.ResultData
	}
	return ""
}

type EngineReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandIndex int32  `protobuf:"varint,1,opt,name=command_index,json=commandIndex,proto3" json:"command_index,omitempty"`
	Caller       string `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// Types that are assignable to ResultOrContractAddress:
	//	*EngineReceipt_CallResult
	//	*EngineReceipt_ContractAddress
	ResultOrContractAddress isEngineReceipt_ResultOrContractAddress `protobuf_oneof:"result_or_contract_address"`
	Logs                    []*EngineLog                            `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *EngineReceipt) Reset() {
	*x = EngineReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_primitive_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReceipt) ProtoMessage() {}

func (x *EngineReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_primitive_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReceipt.ProtoReflect.Descriptor instead.
func (*EngineReceipt) Descriptor() ([]byte, []int) {
	return file_primitive_proto_rawDescGZIP(), []int{5}
}

func (x *EngineReceipt) GetCommandIndex() int32 {
	if x != nil {
		return x.CommandIndex
	}
	return 0
}

func (x *EngineReceipt) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (m *EngineReceipt) GetResultOrContractAddress() isEngineReceipt_ResultOrContractAddress {
	if m != nil {
		return m.ResultOrContractAddress
	}
	return nil
}

func (x *EngineReceipt) GetCallResult() *CallResult {
	if x, ok := x.GetResultOrContractAddress().(*EngineReceipt_CallResult); ok {
		return x.CallResult
	}
	return nil
}

func (x *EngineReceipt) GetContractAddress() string {
	if x, ok := x.GetResultOrContractAddress().(*EngineReceipt_ContractAddress); ok {
		return x.ContractAddress
	}
	return ""
}

func (x *EngineReceipt) GetLogs() []*EngineLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type isEngineReceipt_ResultOrContractAddress interface {
	isEngineReceipt_ResultOrContractAddress()
}

type EngineReceipt_CallResult struct {
	CallResult *CallResult `protobuf:"bytes,3,opt,name=call_result,json=callResult,proto3,oneof"`
}

type EngineReceipt_ContractAddress struct {
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3,oneof"`
}

func (*EngineReceipt_CallResult) isEngineReceipt_ResultOrContractAddress() {}

func (*EngineReceipt_ContractAddress) isEngineReceipt_ResultOrContractAddress() {}

var File_primitive_proto protoreflect.FileDescriptor

var file_primitive_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x69, 0x72, 0x6f, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x48, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x75, 0x0a, 0x04, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x51, 0x0a, 0x09, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x45, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x85, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x72, 0x6f, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x72, 0x6f, 0x68, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0xff, 0x0a, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x61,
	0x6e, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x61, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x09,
	0x12, 0x12, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x10, 0x0d, 0x12, 0x15, 0x0a,
	0x11, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x74, 0x79,
	0x10, 0x2b, 0x12, 0x21, 0x0a, 0x1d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x71, 0x74, 0x79, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x10, 0x30, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x10, 0x0f, 0x12,
	0x11, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x61,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10,
	0x13, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x10, 0x14, 0x12, 0x1b, 0x0a,
	0x17, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x61,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x61,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x61, 0x73, 0x74,
	0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x61, 0x73, 0x74, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x63,
	0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x5f, 0x61, 0x73, 0x74, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x1b, 0x12, 0x1d,
	0x0a, 0x19, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x1c, 0x12, 0x16, 0x0a,
	0x12, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x5f,
	0x74, 0x78, 0x73, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x74, 0x78, 0x73, 0x10, 0x1e, 0x12, 0x1a,
	0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x5f, 0x74, 0x78, 0x73, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x61,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x78, 0x73, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78,
	0x73, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78,
	0x73, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x79, 0x5f, 0x74, 0x78, 0x73, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x78, 0x73, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x10, 0x2a,
	0x12, 0x11, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x10, 0x2d, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x10, 0x32, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x10, 0x34, 0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x79,
	0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x63, 0x61, 0x6e,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d,
	0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x26, 0x12, 0x25, 0x0a,
	0x21, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x10, 0x27, 0x12, 0x24, 0x0a, 0x20, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d,
	0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x10, 0x28, 0x12, 0x27, 0x0a, 0x23, 0x63, 0x61,
	0x6e, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x10, 0x29, 0x12, 0x2a, 0x0a, 0x26, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x10, 0x31, 0x12,
	0x08, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x10, 0x2f, 0x2a, 0xc0, 0x01, 0x0a, 0x13, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x63,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d,
	0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x63, 0x61,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x6d, 0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x10, 0x05, 0x42, 0x1a, 0x5a, 0x18,
	0x69, 0x72, 0x6f, 0x68, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_primitive_proto_rawDescOnce sync.Once
	file_primitive_proto_rawDescData = file_primitive_proto_rawDesc
)

func file_primitive_proto_rawDescGZIP() []byte {
	file_primitive_proto_rawDescOnce.Do(func() {
		file_primitive_proto_rawDescData = protoimpl.X.CompressGZIP(file_primitive_proto_rawDescData)
	})
	return file_primitive_proto_rawDescData
}

var file_primitive_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_primitive_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_primitive_proto_goTypes = []interface{}{
	(RolePermission)(0),           // 0: iroha.protocol.RolePermission
	(GrantablePermission)(0),      // 1: iroha.protocol.GrantablePermission
	(*Signature)(nil),             // 2: iroha.protocol.Signature
	(*Peer)(nil),                  // 3: iroha.protocol.Peer
	(*AccountDetailRecordId)(nil), // 4: iroha.protocol.AccountDetailRecordId
	(*EngineLog)(nil),             // 5: iroha.protocol.EngineLog
	(*CallResult)(nil),            // 6: iroha.protocol.CallResult
	(*EngineReceipt)(nil),         // 7: iroha.protocol.EngineReceipt
}
var file_primitive_proto_depIdxs = []int32{
	6, // 0: iroha.protocol.EngineReceipt.call_result:type_name -> iroha.protocol.CallResult
	5, // 1: iroha.protocol.EngineReceipt.logs:type_name -> iroha.protocol.EngineLog
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_primitive_proto_init() }
func file_primitive_proto_init() {
	if File_primitive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_primitive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_primitive_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_primitive_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDetailRecordId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_primitive_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_primitive_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_primitive_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_primitive_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Peer_TlsCertificate)(nil),
	}
	file_primitive_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EngineReceipt_CallResult)(nil),
		(*EngineReceipt_ContractAddress)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_primitive_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_primitive_proto_goTypes,
		DependencyIndexes: file_primitive_proto_depIdxs,
		EnumInfos:         file_primitive_proto_enumTypes,
		MessageInfos:      file_primitive_proto_msgTypes,
	}.Build()
	File_primitive_proto = out.File
	file_primitive_proto_rawDesc = nil
	file_primitive_proto_goTypes = nil
	file_primitive_proto_depIdxs = nil
}
